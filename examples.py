import main

##string w/ oneven 'a' en even 'b'
def odd_a_even_b():
    rules = [
        ['XV','b','XX'],
        ['XX','b','XV'],
        ['XX','a','VX'],
        ['VX','a','XX'],
        ['VX','b','VV'],
        ['VV','b','VX'],
        ['VV','a','XV'],
        ['XV','a','VV']]

    accepting = ['VV']
    tape = ['a','b','b']

    g = main.graph(rules, accepting, 'circo')
    g.format = 'pdf'
    g.render(directory='graphviz_renders', view=True)

    print(main.eval_FSM(rules, tape, accepting))

# [ ][ ]  [X][ ]  [ ][X]  [ ][ ]  [ ][ ]  [X][O]  [X][ ]  [X][ ]  [O][X]
# [ ][ ], [ ][ ], [ ][ ], [X][ ], [ ][X], [ ][ ], [O][ ], [ ][O], [ ][ ],
# r1      r2      r3      r4      r5      r6      r7      r8      r9
# [ ][X]  [ ][X]  [O][ ]  [ ][O]  [ ][ ]  [O][ ]  [ ][O]  [ ][ ]  [X][O]
# [O][ ], [ ][O], [X][ ], [X][ ], [X][O], [ ][X], [ ][X], [O][X], [X][ ],
# r10     r11     r12     r13     r14     r15     r16     r17     r18-A
# [X][O]  [X][X]  [X][ ]  [X][X]  [X][ ]  [O][X]  [O][X]  [ ][X]  [ ][X]
# [ ][X], [O][ ], [O][X], [ ][O], [X][O], [X][ ], [ ][X], [O][X], [X][O],
# r19     r20-A   r21     r22-A   r23-A   r24     r25-A   r26-A   r27
# [O][ ]  [ ][O]
# [X][X], [X][X]
# r28-A   r29-A

def tictactoe():
    rules = [
        ['[ ][ ][ ][ ]', '0', '[X][ ][ ][ ]'], #r1
        ['[ ][ ][ ][ ]', '1', '[ ][X][ ][ ]'],
        ['[ ][ ][ ][ ]', '2', '[ ][ ][X][ ]'],
        ['[ ][ ][ ][ ]', '3', '[ ][ ][ ][X]'],
        ['[X][ ][ ][ ]', '1', '[X][O][ ][ ]'], #r2
        ['[X][ ][ ][ ]', '2', '[X][ ][O][ ]'],
        ['[X][ ][ ][ ]', '3', '[X][ ][ ][O]'],
        ['[ ][X][ ][ ]', '0', '[O][X][ ][ ]'], #r3
        ['[ ][X][ ][ ]', '2', '[ ][X][O][ ]'],
        ['[ ][X][ ][ ]', '3', '[ ][X][ ][O]'],
        ['[ ][ ][X][ ]', '0', '[O][ ][X][ ]'], #r4
        ['[ ][ ][X][ ]', '1', '[ ][O][X][ ]'],
        ['[ ][ ][X][ ]', '3', '[ ][ ][X][O]'],
        ['[ ][ ][ ][X]', '0', '[O][ ][ ][X]'], #r5
        ['[ ][ ][ ][X]', '1', '[ ][O][ ][X]'],
        ['[ ][ ][ ][X]', '2', '[ ][ ][O][X]'],
        ['[X][O][ ][ ]', '2', '[X][O][X][ ]'], #r6
        ['[X][O][ ][ ]', '3', '[X][O][ ][X]'],
        ['[X][ ][O][ ]', '1', '[X][X][O][ ]'], #r7
        ['[X][ ][O][ ]', '3', '[X][ ][O][X]'],
        ['[X][ ][ ][O]', '1', '[X][X][ ][O]'], #r8
        ['[X][ ][ ][O]', '2', '[X][ ][X][O]'],
        ['[O][X][ ][ ]', '2', '[O][X][X][ ]'], #r9
        ['[O][X][ ][ ]', '3', '[O][X][ ][X]'],
        ['[ ][X][O][ ]', '0', '[X][X][O][ ]'], #r10
        ['[ ][X][O][ ]', '3', '[ ][X][O][X]'],
        ['[ ][X][ ][O]', '0', '[X][X][ ][O]'], #r11
        ['[ ][X][ ][O]', '2', '[ ][X][X][O]'],
        ['[O][ ][X][ ]', '1', '[O][X][X][ ]'], #r12
        ['[O][ ][X][ ]', '3', '[O][ ][X][X]'],
        ['[ ][O][X][ ]', '0', '[X][O][X][ ]'], #r13
        ['[ ][O][X][ ]', '3', '[ ][O][X][X]'],
        ['[ ][ ][X][O]', '0', '[X][ ][X][O]'], #r14
        ['[ ][ ][X][O]', '1', '[ ][X][X][O]'],
        ['[O][ ][ ][X]', '1', '[O][X][ ][X]'], #r15
        ['[O][ ][ ][X]', '2', '[O][ ][X][X]'],
        ['[ ][O][ ][X]', '0', '[X][O][ ][X]'], #r16
        ['[ ][O][ ][X]', '2', '[ ][O][X][X]'],
        ['[ ][ ][O][X]', '0', '[X][ ][O][X]'], #r17
        ['[ ][ ][O][X]', '1', '[ ][X][O][X]'],
        ['[X][O][ ][X]', '2', '[X][O][O][X]'], #r19
        ['[X][ ][O][X]', '1', '[X][O][O][X]'], #r21
        ['[O][X][X][ ]', '3', '[O][X][X][O]'], #r24
        ['[ ][X][X][O]', '0', '[O][X][X][O]'] #r27
    ]

    accepting = [
        '[X][O][X][ ]', #r18
        '[X][X][O][ ]', #r20
        '[X][X][ ][O]', #r22
        '[X][ ][X][O]', #r23
        '[O][X][ ][X]', #r25
        '[ ][X][O][X]', #r26
        '[ ][O][X][X]', #r29
        '[O][ ][X][X]'  #r28
    ]

    g = main.graph(rules, accepting)
    g.format = 'pdf'
    g.render(directory='graphviz_renders', view=True)

    main.eval_FSM_IO(rules, accepting)

def gen_ganzenbord():
    res = []
    for i in range(63):
        # if((i/9==1) or ((i+4)/9==1)):
        #     rule = [i, j+1, i+j+1]
        # else:
        for roll in range(1,7):
            n = roll
            while ((i+n)/9 == 1) or ((i+4)/9 == 1):
                n = n+roll


            rule = [i, j+1, i+j+1]
            res.append(rule)
    return res

#odd_a_even_b()
print(gen_ganzenbord())